from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import queue
import threading
import logging


class DriverPool:
    """ –ü—É–ª Selenium-–¥—Ä–∞–π–≤–µ—Ä–æ–≤ —Å –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º """

    def __init__(self, max_drivers=5):
        self.max_drivers = max_drivers
        self.pool = queue.Queue()
        self.lock = threading.Lock()
        self._initialized = False

    @staticmethod
    def _create_driver():
        """ –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π Selenium-–¥—Ä–∞–π–≤–µ—Ä. """
        chrome_options = Options()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')

        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
        return driver

    def _initialize_pool(self):
        """ –õ–µ–Ω–∏–≤–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É–ª –¥—Ä–∞–π–≤–µ—Ä–æ–≤. """
        if not self._initialized:
            with self.lock:
                if not self._initialized:
                    logging.info(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ Selenium-–¥—Ä–∞–π–≤–µ—Ä–æ–≤ ({self.max_drivers} —à—Ç.)")
                    for _ in range(self.max_drivers):
                        self.pool.put(self._create_driver())
                    self._initialized = True

    def get_driver(self):
        """ –ë–µ—Ä—ë—Ç –¥—Ä–∞–π–≤–µ—Ä –∏–∑ –ø—É–ª–∞ (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è). """
        self._initialize_pool()
        with self.lock:
            if self.pool.empty():
                logging.warning("‚ö† –ü—É–ª –¥—Ä–∞–π–≤–µ—Ä–æ–≤ –ø—É—Å—Ç, —Å–æ–∑–¥–∞—ë—Ç—Å—è –∞–≤–∞—Ä–∏–π–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä.")
                return self._create_driver()  # –ï—Å–ª–∏ –ø—É–ª –ø—É—Å—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π (–∞–≤–∞—Ä–∏–π–Ω—ã–π —Å–ª—É—á–∞–π)
            return self.pool.get()

    def release_driver(self, driver):
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥—Ä–∞–π–≤–µ—Ä –≤ –ø—É–ª (–µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ). """
        with self.lock:
            if self.pool.qsize() < self.max_drivers:
                self.pool.put(driver)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—É–ª
            else:
                driver.quit()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–π –¥—Ä–∞–π–≤–µ—Ä

    def close_all(self):
        """ –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –¥—Ä–∞–π–≤–µ—Ä—ã –≤ –ø—É–ª–µ. """
        while not self.pool.empty():
            driver = self.pool.get()
            driver.quit()
        self._initialized = False
        logging.info("üõë –í—Å–µ Selenium-–¥—Ä–∞–π–≤–µ—Ä—ã –∑–∞–∫—Ä—ã—Ç—ã.")

    def __enter__(self):
        """ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—É–ª–∞. """
        self._initialize_pool()
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        """ –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. """
        self.close_all()
